MAPS
header: <map>

map<char, int> m;                          initialize map of size 0
m.clear()                                  removes all elements of map
m.size()                                   return size of map
m.empty()                                  returns true if map is empty
m.begin() , m.end()                        iterators
                                           **********************Iteration**************************
                                           map<char,int>::iterator i;  //initialize iterator
                                           for (i=m.begin(); i!=m.end(); ++i)
                                              cout << i->first << " => " << i->second << '\n';

                                            //prints key value pairs in the format "key=>value"
                                           *********************************************************
m['k']                                     returns value corresponding to key 'k' if the key exists, else returns reference 
                                           to new element
m.find('k')                                returns value corresponding to key 'k'
m.count('k')                               return 1 if key 'k' exixts in the map, else returns 0
m.insert(pair<char,int>('k',v));           insert an element with key 'k' and value 'v'
m['k']=v                                           
m.erase('k')                               erases element with key 'k'
                                           **********************************************************
                                           it=mymap.find('b');
                                           mymap.erase (it);                   // erasing by iterator

                                           mymap.erase ('c');                  // erasing by key

                                           it=mymap.find ('e');
                                           mymap.erase ( it, mymap.end() );    // erasing by range
                                           ***********************************************************

***********************************************************************************************************************************
STACK
header: <stack>
stack<int> s;   initialize stack
s.push()			  push an element
s.pop()			    pop element(does not return)
s.top()			    returns topmost element of the stack
s.size()			  returns number of elements
s.empty()		    returns true if stack is empty

*****************************************************************************************

QUEUE
header: <queue>
queue<int> q;   initialize queue
q.push()			  pushes element to back/rear
q.pop()			    removes the first element inserted
q.front()			  returns the front element of the queue
q.back()			  returns the rear element of the queue
q.size()			  returns number of elements
q.empty()       returns true if queue is empty

*****************************************************************************************

PRIORITY QUEUE
Priority queue is just like a normal queue except the element removed from the queue is always the greatest among all the elements in the queue

priority_queue<int> pq
pq.push()		  pushes an element
              *************************************
              pq1.push(30);  // inserts 30 to pq1 , now top = 30
              pq1.push(40);  // inserts 40 to pq1 , now top = 40 ( maxinmum element)
              pq1.push(90);  // inserts 90 to pq1 , now top = 90  
              pq1.push(60);	// inserts 60 to pq1 , top still is 90	
              **************************************
pq.pop()			removes the topmost(greatest) element 
pq.top()			returns the topmost(greatest) element
pq.size()     returns number of elements
pq.empty()    returns true is priority queue is empty

**********************************************************************************************************
LISTS
*************INITIALISATION******************
list<int> myList{1,2,3};
   /* creates list with 1,2,3 in it */

   list<int> myNewList = 1;
   /* create list myNewList of integer 
     and copies value of 1 into it*/
     
**************** INSERTION*******************
  list<int> l = {1,2,3,4,5};
  list<int>::iterator it = l.begin();           

  l.insert (it+1, 100);  // insert 100 before 2 position
  /* now the list is 1 100 2 3 4 5 */
  
  list<int> new_l = {10,20,30,40}; // new list 

  new_l.insert (new_l.begin() , l.begin(), l.end());
  /* insert elements from beginning of list l to end of list l 
    before 1 position in list new_l */
  
  /* now the list new_l is 1 100 2 3 4 5 10 20 30 40 */

  l.insert(l.begin() , 5 , 10);  // insert 10 before beginning 5 times 
  /* now l is 10 10 10 10 10 1 100 2 3 4 5 */ 
  
  ******************PUSH/POP********************
  list<int> l{1,2,3,4,5};
   
   l.pop_back()();
   /* now the list becomes 1,2,3,4 */
   
   l.pop_front()();
   /* now the list becomes 2,3,4 */
   
   
   l.empty()          returns true if list is empty
   l.size()           returns size
   l.front()          returns first element from front
   l.back()           returns first element from back
   l.reverse()        reverse a list
   l.sort()           sorting a list
   list1.merge(list2) merging
  
  *************************************************************************************************
  
  DEQUE
  
